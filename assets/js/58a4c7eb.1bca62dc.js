"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[669],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},_=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),_=o,y=d["".concat(l,".").concat(_)]||d[_]||u[_]||a;return t?r.createElement(y,i(i({ref:n},c),{},{components:t})):r.createElement(y,i({ref:n},c))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=_;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},5383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:2},i="How It Works",s={unversionedId:"how_it_works",id:"how_it_works",title:"How It Works",description:"The spycey module works by creating a parent/child tree and builds a SPICE netlist for DC operating point analysis.",source:"@site/docs/how_it_works.md",sourceDirName:".",slug:"/how_it_works",permalink:"/spycey/how_it_works",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/spycey/"},next:{title:"Models",permalink:"/spycey/models"}},l={},p=[],c={toc:p};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-it-works"},"How It Works"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"spycey")," module works by creating a parent/child tree and builds a SPICE netlist for DC operating point analysis. "),(0,o.kt)("p",null,"Consider the following power tree:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'P12V = PNode.IN_DC("P12V0", 12)\nP5V0 = PNode.SMPS("P5V0-BUCK", 5, 0.9, P12V)\nLOAD = PNode.CC_LOAD("Load", 1, P5V0)\n\nprint(P12V.Netlist())\n')),(0,o.kt)("p",null,"Below is the generated netlist. Every node instantiates a subcircuit model for a specific power supply type. Refer to ",(0,o.kt)("a",{parentName:"p",href:"/spycey/models"},"Models")," section to see details for the SPICE models. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},".title INPUT_12V_5jA3\n.subckt INPUT_12V_5jA3 n1 n3 n4\nV1 n1 0 12\nBVO n3 0 v=V(n1)\nBIO n4 0 v=-I(V1)\n.ends INPUT_12V_5jA3\n\n.subckt SMPS_5V_4Fdk n1 n2 n3 n4 n5 n6 n7\nV2 n1 n11 0\nB1 n11 0 i=-I(V1) * V(n2)/V(n1)\nB2 n11 0 i=( V(n2) * -I(V1) * (1-0.9) ) / 0.9 / V(n11)\nV1 n2 0 5\nBVO n3 0 v=V(n2)\nBIO n4 0 v=-I(V1)\nBVI n5 0 v=V(n1)\nBII n6 0 v=I(V2)\nBEF n7 0 v=0.9\n.ends SMPS_5V_4Fdk\n\n.subckt LOAD_CC_1A_77Dn n1 n5 n6\nB1 n1 0 i=1\nBVI n5 0 v=V(n1)\nBII n6 0 v=I(B1)\n.ends LOAD_CC_1A_77Dn\nXINPUT_12V_5jA3 INPUT_12V_5jA3 VO-INPUT_12V_5jA3 IO-INPUT_12V_5jA3 INPUT_12V_5jA3\nXSMPS_5V_4Fdk INPUT_12V_5jA3 SMPS_5V_4Fdk VO-SMPS_5V_4Fdk IO-SMPS_5V_4Fdk VI-SMPS_5V_4Fdk II-SMPS_5V_4Fdk EF-SMPS_5V_4Fdk SMPS_5V_4Fdk\nXLOAD_CC_1A_77Dn SMPS_5V_4Fdk VI-LOAD_CC_1A_77Dn II-LOAD_CC_1A_77Dn LOAD_CC_1A_77Dn\n")),(0,o.kt)("p",null,"This netlist could be copied into LTspice with the ",(0,o.kt)("em",{parentName:"p"},".op")," command and would yield the following output."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"INSERT LTSPICE Screenshot")),(0,o.kt)("p",null,"The edge and node parameters can also be solved using spycey which is using pyspice and ngspice under the hood."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"P12\n")))}d.isMDXComponent=!0}}]);